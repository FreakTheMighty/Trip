// Auto-generated from tripclient.html.
// DO NOT EDIT.

library tripclient_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:google_oauth2_client/google_oauth2_browser.dart';
import 'dart:json' as JSON;
import 'package:intl/date_symbol_data_local.dart';
import 'package:intl/intl.dart';
import '../Trip.dart';


// Original code


final clientid = '459145064049-8q4pj5ppqd1ugvvfkgah4tegkllb0anf.apps.googleusercontent.com';
final locationQuery = 'https://www.googleapis.com/latitude/v1/location';

final Element queryButton = query("#query");
final ImageElement loginButton = query("#login");
final Element logoutButton = query("#logout");
final DateInputElement dateQueryInput = query("#dateQueryInput");

final __changes = new __observe.Observable();

DateTime __$dateQuery = new DateTime.now();
DateTime get dateQuery {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'dateQuery');
  }
  return __$dateQuery;
}
set dateQuery(DateTime value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'dateQuery',
        __$dateQuery, value);
  }
  __$dateQuery = value;
}
get queryDateFormatted => new DateFormat("E", "en_US").format(dateQuery);

List<Trip> trips = toObservable(new List());
/*TODO: Report bug, the second observable seems to be required
 * to make the trips observable trigger web_ui updates.
 */
String __$status = "";
String get status {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'status');
  }
  return __$status;
}
set status(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'status',
        __$status, value);
  }
  __$status = value;
}
String __$overview = "Your Trips";
String get overview {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'overview');
  }
  return __$overview;
}
set overview(String value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'overview',
        __$overview, value);
  }
  __$overview = value;
}

final auth = new GoogleOAuth2(
    clientid,
    ["https://www.googleapis.com/auth/latitude.all.best"],
    tokenLoaded:oauthReady,
    autoLogin: false);


void oauthReady(Token token) {
  
  var testOAuth = new SimpleOAuth2(token.data);
  
  loginButton.style.display = "none";
  logoutButton.style.display = "inline-block";
  
  var request = new HttpRequest();
  final url = "https://www.googleapis.com/latitude/v1/location";
  
  request.onLoadEnd.listen((Event e) {
    if (request.status == 200) {
      var data = JSON.parse(request.responseText);
    }
  });
  
  request.open("GET", url);
  testOAuth.authenticate(request).then((request) => request.send());
}

void tripsFound(Map data){
  trips.clear();
  for (Map t in data['trips']){
    Trip trip = new Trip.fromJson(t);
    trips.add(trip);
  }
}

void tripsNotFound(var data){
  status = "No trips found.";
}

queryTrips(var event) {
  var start = new DateTime(dateQuery.year, dateQuery.month, dateQuery.day, 5);
  var end = start.add(const Duration(hours: 16));
  
  var request = new HttpRequest();
  var postrequest = new HttpRequest();
  postrequest.onLoadEnd.listen((Event e) {
    if (postrequest.status == 200) {
      tripsFound(JSON.parse(postrequest.responseText));
    } else {
      tripsNotFound("Error ${postrequest.status}: ${postrequest.statusText}");
    }
  });

  request.onLoadEnd.listen((Event e) {
    if (request.status == 200) {
      var data = JSON.parse(request.responseText);
      if (data['data'].containsKey("items")){
        postrequest.open("POST", "../trips");
        postrequest.setRequestHeader('content-type', 'application/json');
        postrequest.send(request.responseText); // perform the async POST
        status = " ";
      } else {
        status = "No location info was found for this date.";
        trips.clear();
      }
    }
  });
  
  if (auth.token != null){
    var url = "${locationQuery}?granularity=best&max-results=1000&min-time=${start.millisecondsSinceEpoch}&max-time=${end.millisecondsSinceEpoch}&access_token=${auth.token.data}";
    request.open("GET", url);
    request.send();
  } else {
    status = "Please login.";
  }
}


void main() {
  dateQuery = new DateTime.now();
  loginButton.onClick.listen((e){
    auth.login();
    status = "";
  });
  logoutButton.onClick.listen((e) {
                                    auth.logout();
                                    loginButton.style.display = "inline-block";
                                    logoutButton.style.display = "none";
                                  });
  
  queryButton.onClick.listen(queryTrips);
  
  loginButton.onMouseOver.listen((e){
    loginButton.src = "../assets/White-signin_Long_hover_44dp.png";
  });
  
  loginButton.onClick.listen((e){
    loginButton.src = "../assets/White-signin_Long_hover_44dp.png";
  });
  
  loginButton.onMouseOut.listen((e){
    loginButton.src = "../assets/White-signin_Long_base_44dp.png";
  });
  
  dateQueryInput.onChange.listen((e){
    print("Triggered");
    print(dateQuery);
    trips.clear();
  });
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.tag('h1'), __html1 = new autogenerated.Element.html('<h1> Find your Trips </h1>'), __html2 = new autogenerated.Element.html('<div class="report_item"></div>');
  var __e11, __e3, __e4, __e5, __e7;
  var __t = new autogenerated.Template(__root);
  __e3 = __root.nodes[1];
  __t.conditional(__e3, () => trips.length > 0, (__t) {
    var __e2;
    __e2 = __html0.clone(true);
    var __binding0 = __t.contentBind(() => queryDateFormatted, false);
    var __binding1 = __t.contentBind(() => trips.length, false);
    __e2.nodes.addAll([new autogenerated.Text(' On '),
        __binding0,
        new autogenerated.Text(' you took '),
        __binding1,
        new autogenerated.Text(' trips.')]);
  __t.addAll([new autogenerated.Text('  \n      '),
      __e2,
      new autogenerated.Text('\n     ')]);
  });

  __e4 = __root.nodes[3];
  __t.conditional(__e4, () => trips.length == 0, (__t) {
  __t.addAll([new autogenerated.Text('  \n      '),
      __html1.clone(true),
      new autogenerated.Text('\n     ')]);
  });

  __e5 = __root.nodes[5].nodes[1].nodes[1];
  __t.listen(__e5.onInput, ($event) { dateQuery = __e5.valueAsDate; });
  __t.oneWayBind(() => dateQuery, (e) { if (__e5.valueAsDate != e) __e5.valueAsDate = e; }, false, false);
  __e7 = __root.nodes[5].nodes[1].nodes[9];
  var __binding6 = __t.contentBind(() => status, false);
  __e7.nodes.add(__binding6);
  __e11 = __root.nodes[7];
  __t.loop(__e11, () => trips, ($list, $index, __t) {
    var trip = $list[$index];
    var __e10;
    __e10 = __html2.clone(true);
    var __binding8 = __t.contentBind(() => trip.startTimeFormatted, false);
    var __binding9 = __t.contentBind(() => trip.duration.inMinutes, false);
    __e10.nodes.addAll([new autogenerated.Text('Your trip begain at '),
        __binding8,
        new autogenerated.Text(' and took '),
        __binding9,
        new autogenerated.Text(' minutes.')]);
  __t.addAll([new autogenerated.Text('\n         '),
      __e10,
      new autogenerated.Text('\n       ')]);
  });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=tripclient.dart.map